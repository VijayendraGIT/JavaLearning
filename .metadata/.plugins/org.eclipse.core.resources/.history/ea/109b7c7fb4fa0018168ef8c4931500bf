package testcases;

import java.io.IOException;
import java.util.Properties;
import java.util.concurrent.TimeUnit;

import org.apache.poi.ss.usermodel.Row;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.chrome.ChromeDriver;
import org.testng.annotations.BeforeMethod;
import org.testng.annotations.BeforeTest;
import org.testng.annotations.Test;
import org.apache.poi.ss.usermodel.Sheet;

import excelUtilities.ReadExcel;
import objectUtilites.ReadObjectFile;
import operations.PerformUIOperations;

public class ExceuteTest {

	String[][] testSteps = null;
	WebDriver driver;
	ReadObjectFile object = new ReadObjectFile();
	Properties allObjects;
	Row row;
	int testcaseNo = 1;
	int totalRows = 0;

	@BeforeTest
	public void Setup() throws IOException {
		System.setProperty("webdriver.chrome.driver", System.getProperty("user.dir") + "//Drivers//chromedriver.exe");

		allObjects = object.getObjectRepository();

		// ReadExcel
		ReadExcel excel = new ReadExcel();
		Sheet sheet = excel.readExcel("KeywordDriven");

		// No of Rows
		int rowCount = sheet.getLastRowNum();

		// Loop over rows of excel file to read ans store steps in testSteps
		testSteps = new String[rowCount][5];

		for (int i = 0; i < rowCount; i++) {
			row = sheet.getRow(i + 1); // By pass testcase name row
			totalRows = row.getRowNum();
			for (int j = 0; j < row.getLastCellNum(); j++) {
				System.out.println("i =" + i + "j=" + j + " Cell no:" + row.getLastCellNum());
				// System.out.println("Value=["+row.getCell(j).toString()+"]");

				int type = row.getCell(i).getCellType();
				System.out.println("Type = " + type + " | " + "j =" + j);
				if (type == 0) { // Numbers
					System.out.println(row.getCell(j).getNumericCellValue() + " | ");
				} else if (type == 1) { // String
					if (!row.getCell(j).getStringCellValue().isEmpty()) {
						System.out.print(row.getCell(j).getStringCellValue() + " | ");
					}
				} else if (type == 2) { // Cell contains formula => Actual value
										// of cell
					System.out.println(row.getCell(j).getCachedFormulaResultType() + " | ");
				} else if (type == 3) { // Cell is Empty
					System.out.println(row.getCell(j).getStringCellValue() + " | ");
				} else if (type == 4) { // Cell is Boolean
					System.out.println(row.getCell(j).getBooleanCellValue() + " | ");
				} else {
					System.out.println("Invalid type");
				}

				testSteps[i][j] = row.getCell(j).toString();
				System.out.println(testSteps[i][j]);
			}

		}

	}

	@BeforeMethod
	public void invokeBrowser() {
		driver = new ChromeDriver();
		driver.manage().deleteAllCookies();
		driver.manage().window().maximize();
		driver.manage().timeouts().implicitlyWait(30, TimeUnit.SECONDS);
		driver.manage().timeouts().pageLoadTimeout(30, TimeUnit.SECONDS);
	}

	@Test
	public void tests() {
		PerformUIOperations operation = new PerformUIOperations(driver);

		for (int i = testcaseNo; i < totalRows; i++) {

			if (!(testSteps[i][0].isEmpty())) {
				testcaseNo = i + 1;
				break;
			}

			operation.performOperation(allObjects, testSteps[i][1], testSteps[i][2], testSteps[i][3], testSteps[i][4]);
		}

	}
}
